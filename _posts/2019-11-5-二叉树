---
layout:     post
title:      二叉树
subtitle:   二叉树
date:       2019-11-05
author:     BY
header-img: img/post-bg-cook.jpg
catalog: true
tags:
    - java
---

### 二叉树

> 树形结构核心特点：

	一个父亲可以有多个孩子节点，但是任何一个孩子节点(非根节点)最多只能有一个父亲

_***二叉树遍历[非常重要]：***_

	1.先序遍历：先访问根节点再递归遍历左子树，再递归遍历右子树
	2.中序遍历：先递归遍历左子树，再访问根节点，再递归遍历右子树
	3.后序遍历：先递归遍历左子树，再递归遍历右子树，再访问根节点
	4.层序遍历.：按照每一层元素从左到右遍历即可.
  
> 先构建一颗像这样的树：

![](https://github.com/q1206271031/photo/raw/master/%E4%BA%8C%E5%8F%89%E6%A0%91/%E6%9E%84%E5%BB%BA%E6%A0%91.png)

```java
class Node{
    public char val;
    public Node left;
    public Node right;

    public Node(char val) {
        this.val = val;
    }
}

public class Binarytree {
    //当root为null时候，就是一个空树
    public static Node root = null;
    //构建一棵树
    public static Node build(){
        Node A = new Node('A');
        Node B = new Node('B');
        Node C = new Node('C');
        Node D = new Node('D');
        Node E = new Node('E');
        Node F = new Node('F');
        Node G = new Node('G');
        A.left = B;
        A.right = C;
        B.left = D;
        B.right = E;
        E.left = G;
        C.right = F;
        return A;
    }
    //先序遍历
    public static void preOrder(Node root){
        //先访问根节点，递归遍历左子树，递归遍历右子树
        if (root == null) {
            //空树不用遍历
            return;
        }
        //访问就用打印表示
        System.out.println(root.val);
        preOrder(root.left);
        preOrder(root.right);
    }
    //中序遍历
    public static void inOrder(Node root){
        //先递归访问左子树，访问根节点，再递归访问右子树
        if (root == null) {
            //空树不用遍历
            return;
        }
        //访问就用打印表示
        inOrder(root.left);
        System.out.println(root.val);
        inOrder(root.right);
    }
    //后序遍历
    public static void postOrder(Node root){
        if(root == null){
            return;
        }
        postOrder(root.left);
        postOrder(root.right);
        System.out.println(root.val);
    }
    //求节点个数
//    public static int treeSize = 0;
//    public static void size(Node root){
//        if (root == null) {
//            return;
//        }
//        treeSize++;
//        size(root.left);
//        size(root.right);
//    }
    //借助递归
    public static int size(Node root){
        if(root == null){
            return 0;
        }
        //这棵树的节点个数可以理解为：
        //1 + 左子树的节点个数 + 右子树的节点个数
        return 1 + size(root.left) + size(root.right);
        //+1是因为有根节点
    }

    //借助遍历的方式，访问节点的时候，先判断是不是叶子节点，若果是就++
//    public static int leafSize = 0;
//    public static void getLeafSize(Node root){
//        if (root == null) {
//            return;
//        }
//        if(root.left == null && root.right == null){
//            leafSize++;
//        }
//        getLeafSize(root.left);
//        getLeafSize(root.right);
//    }
    //借助递归
    public static int getLeafSize(Node root){
        if (root == null) {
            return 0;
        }
        if(root.left == null && root.right == null){
            return 1;
        }
        //求root有多少个叶子节点
        //左子树的叶子节点个数 + 右子树的叶子节点个数
        return getLeafSize(root.left) + getLeafSize(root.right);
    }

    //求第K层节点个数
    public static int getKLevelSize(Node root,int k){
        //特殊情况
        if (root == null || k < 1) {
            return 0;
        }
        if(k == 1){
            //k为1时就一个根节点
            return 1;
        }
        //求第K层节点个数
        //求左子树的k - 1层节点个数 + 右子树的的第k - 1层节点个数
        return getKLevelSize(root.left,k - 1) + getKLevelSize(root.right,k - 1);
    }

    public static void main(String[] args) {
//        root = build();
//        preOrder(root);
//        inOrder(root);
//        postOrder(root);
//        System.out.println(size(root));
//        System.out.println(getLeafSize(root));
        System.out.println(getKLevelSize(root,3));
    }
}

```

> 针对普通二叉树，核心操作为遍历 -> 理解“递归”

