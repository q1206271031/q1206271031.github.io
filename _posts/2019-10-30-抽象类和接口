---
layout:     post
title:      抽象类和接口
subtitle:   abstract，interface，extends,implements
date:       2019-10-30
author:     BY
header-img: img/post-bg-cook.jpg
catalog: true
tags:
    - java
---


### 抽象类和接口

### 抽象类

***无法被private和final修饰***

> 1.抽象类包含抽象方法；

> 2.抽象类包含抽象方法，也可包含非抽象方法

> 3.抽象类无法new对象

> 4.一个普通的类如果继承了抽象类，一定要重写抽象方法

> 5.抽象类继承抽象类，就不需要重写抽象方法

> 6.若一个普通类继承了一个抽象类A,但A类并没有重写C类的抽象方法，那么当前类必须重写

_**若一个普通类继承了上面的抽象类，如果抽象类并没有重写抽象的方法，那么当前普通类一定要重写**_ 


### 接口
**实现为了多继承**

> 1.不能实现具体的方法

> 2.方法默认public abstract 方法

> 3.字段默认public static final 类型

> 4.接口无法继承可以实现

> 5.无法实例化，但可以向上转型

> 6.一个类可实现多个接口

_***接口之间无法相互实现***_

_***接口间可相互继承***_

_***抽象类可以实现接口***_

_***JAVA中有个内置接口为Comparable接口，必须要重写它得到compareTo方法***_


### 比较

> 字符串比较（compareTo）

```java
public int compareTo(student o){
      return this.name.compareTo(o.name) 
}
```

> **抽象类和接口区别**

|  No   |  区别  |          抽象类        |        接口         |
|  :--: |  :--:  |         :----:        |     :---------:     | 
|  1   |结构组成|      普通类+抽象方法     |  抽象方法+全局变量  |     
|  2   |  权限  |         各种权限         |       public       |
|  3   |子类使用|使用extend关键字继承抽象类 |使用implements关键字实现接口|
|  4   |  关系  |   一个抽象类继承多个接口  |接口不能继承抽象类，但接口可用extends关键字继承多个父接口|
|  5   |子类限制|   一个子类继承一个抽象类  |一个子类可以实现多个接口|

### 关键字clone

      而implements Cloneable是一个空接口,因为它起到的作用是：标记当前类可以进行clone()
      除此之外，必须重写一个方法：Object的clone方法

> **正常拷贝**

```java
class Person implements Cloneable{
    public String name;
    public int age;

    public Person(){

    }
    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }
    @Override
    protected Object clone() throws CloneNotSupportedException {
        Person p = (Person)super.clone();
        return p;
    }
}

public class TestDemo8 {
     public static void main2(String[] args) throws CloneNotSupportedException {
        Person person = new Person();
        person.name = "caocao";
        Person person2 = (Person)person.clone();
        person2.name = "liubei";
        System.out.println(person.name);
        System.out.println(person2.name);
      }
}
```

![](https://github.com/q1206271031/photo/raw/master/%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3/%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%AD%A3%E5%B8%B8%E5%85%8B%E9%9A%86(clone).png)

      拷贝之后会有两份"caocao",但是经过person2.name = "liu"赋值之后，会得到两份不同的对象和引用

> **非正常拷贝**
 
```java
class Money implements Cloneable{
    double money = 12.5;

    @Override
    protected Object clone() throws CloneNotSupportedException {
        return super.clone();
    }
}

class Person implements Cloneable{
    public String name;
    public int age;

    Money m;

    public Person(){

    }

    public Person(String name, int age) {
        this.name = name;
        this.age = age;
        this.m = new Money();
    }
     @Override
    protected Object clone() throws CloneNotSupportedException {
        //拷贝出p对象
        Person p = (Person)super.clone();
         //this.m = (Money) p.m.clone();//可以
        p.m = (Money) this.m.clone();//可以,重新创建出一个m，并且将它的引用给p的m
        return p;
    }
}
public class TestDemo8 {

    public static void main(String[] args) throws CloneNotSupportedException {
        Person person = new Person("caocao",18);
        Person person2 = (Person) person.clone();

        System.out.println(person.m.money);
        System.out.println(person2.m.money);

        person2.m.money = 99.9;
        System.out.println("通过person2改变money");
        System.out.println(person.m.money);
        System.out.println(person2.m.money);
```

![](https://github.com/q1206271031/photo/raw/master/%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3/%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B7%B1%E6%8B%B7%E8%B4%9D.png)

![](https://github.com/q1206271031/photo/raw/master/%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3/gg.JPG)

