### 泛型

    /**
     * 1、实现一个通用的ArrayList
     * 2、泛型：MyArrayList<T>:他只是一个占位符
     *    证明当前的类是一个泛型类
     * 3、
     *   坑1：泛型是不能够new 泛型数组的 T[] a = new T[];ERROR
     *   坑2：泛型的参数必须是引用类型，不能是内置类型(简单类型)
     * 4、泛型的意义
     *    a:可以进行自动类型检查
     *    b:可以自动进行类型转换
     * 5、泛型到底是怎么编译的？
     *    类型的擦除机制。-》Object  并不是替换
     * 6、泛型参数是不参与类型的组成的。
     */

***泛型指定的是添加类的种类***
***简单类型不能做参数，用包装类	如int的（Integer）***

_***不能new一个泛型类型数组***_

> 泛型意义：

        1.自动进行类型检查(并不进行替换)
        2.自动进行类型强制转换

> 泛型编译时期：

        擦除机制 -> 擦除成Object
        实现了什么接口就会被擦除成什么
        泛型不参与类型的组成

> 包装类：

        除了int		Integer
            char	Character
            其他都是首字母大写
	
***自动装箱用Integer.valueOf方法（静态方法，直接.访问）
自动拆箱使用的intValue方法（普通方法，需要new Integer）***


> 语法
```java
class 泛型类名称<类型形参列表> { // 这里可以使用类型参数 }
class 泛型类名称<类型形参列表> extends 继承类/* 这里可以使用类型参数 */ { // 这里可以使用类型参数 }

@SuppressWarnings("unchecked")//强制压制警告
```

> 实现一个通用的ArrayList

```java
interface MyList<T> {
    void add(T data);
}
public class MyArrayList<T> implements MyList<T>{

    public T[] elem;
    public int usedSize;

    public MyArrayList() {
        this.elem = (T[])new Object[10];
        //this.elem = new Object[10];
        this.usedSize = 0;
    }
    //重写了方法
    public void add(T data) {
        this.elem[this.usedSize] = data;
        this.usedSize++;
    }

    public T get() {
        T a = this.elem[this.usedSize-1];
        this.usedSize--;
        return a;
    }
}
```

> 泛型上下界

***泛型：指定***
***通配符：代表只读的***

```java
//泛型的上界-》你传入的T一定是实现了Comparable接口的
class Algorithm<T extends Comparable<T>> {
    //求数组最大值
    public T maxNum(T[] array) {
        T max = array[0];
        for (int i = 1; i < array.length; i++) {
            if(array[i].compareTo(max) > 0) {
                max = array[i];
            }
        }
        return max;
    }
}

public static void main1(String[] args) {
        Algorithm<Integer> algorithm = new Algorithm<>();
        Integer[] array = {1,2,3,4,5,6,7,8,9};
        //使用new一个对象来引用它的方法
        Integer ret = algorithm.maxNum(array) ;
        System.out.println(ret);

        Algorithm<String> algorithm2 = new Algorithm<>();
        String[] strings ={"abc","def","ghk"};
        String str = algorithm2.maxNum(strings) ;
        System.out.println(str);

    }
```

> 泛型上下界(静态内部类)

```java
class Algorithm2 {

    public static<T extends Comparable<T>> T maxNum(T[] array) {
        T max = array[0];
        for (int i = 1; i < array.length; i++) {
            if(array[i].compareTo(max) > 0) {
                max = array[i];
            }
        }
        return max;
    }
}

public static void main2(String[] args) {

        Integer[] array = {1,2,3,4,5,6,7,8,9};
        Integer ret = Algorithm2.<Integer>maxNum(array) ;
        //array传过去形参为T[]，所以会自动识别成Integer类型
        //静态内部类直接用类名调用
        Integer ret2 = Algorithm2.maxNum(array) ;
        System.out.println(ret);

    }
```

> 通配符上下界

***泛型的上界：ArrayList<? extends Number> 一定是Number的子类:Integer，double等***
***泛型的下界：ArrayList<? super Integer>  问号：-》他一定是Integer父类，Number或Object***
```java
public static void print2(ArrayList<? super Integer> array) {
        //array.s(0,19);
        //Object说明该类型的基类就是Object
        for(Object obj : array){
            System.out.print(obj+" ");
        }
        System.out.println();
    }
```

#### 链表泛型

```java
public class TestLink<T> {

    static class Node<T> {
        public T data;
        public Node<T> next;
        public Node() {

        }
        public Node(T data) {
            this.data = data;
        }
    }

    public Node<T> head;

    public TestLink() {

    }

    public void addLast(T data) {
        Node<T> node = new Node<>(data);
        if(this.head == null) {
            this.head = node;
        }else {
            Node cur = this.head;
            while (cur.next != null) {
                cur = cur.next;
            }
            cur.next = node;
        }
    }
    public void display() {
        Node cur = this.head;
        while (cur != null) {
            System.out.print(cur.data+" ");
            cur = cur.next;
        }
        System.out.println();
    }
    public void display2(Node newHead) {
        Node cur = newHead;
        while (cur != null) {
            System.out.print(cur.data+" ");
            cur = cur.next;
        }
        System.out.println();
    }
}
```
